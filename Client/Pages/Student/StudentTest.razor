@page "/student-test/{TestId:int}"
@using MoysIQPlatform.Shared.Models.Questions
@using MoysIQPlatform.Shared.Models.Tests
@inject ITestService TestService
@inject NavigationManager Nav

<div dir="rtl" class="pa-4">

    @if (errorMessage != null)
    {
        <MudAlert Severity="Severity.Error" Elevation="4" Variant="Variant.Filled" Color="Color.Error" Class="my-2">
            @errorMessage
        </MudAlert>
    }
    else if (questions == null)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="my-4" />
        <p class="text-center">⏳ جاري تحميل البيانات...</p>
    }
    else
    {
        <MudPaper Class="pa-6 my-4" Elevation="4">
            <h3 class="mb-2">📘 <strong>@_test.Title</strong></h3>
            <p class="text-muted">🕒 من <strong>@_test.StartTime.ToLocalTime():g</strong> إلى <strong>@_test.EndTime.ToLocalTime():g</strong></p>
        </MudPaper>

        <MudAlert Severity="Severity.Success" Variant="Variant.Outlined" Color="Color.Success" Class="mb-4">
            @message
        </MudAlert>

        <EditForm Model="answers">
            @{
                int index = 1;
            }
            @foreach (var q in questions)
            {
                <MudPaper Class="my-3 p-4" Elevation="2" Style="background-color: #f9f9f9;">
                    <h5 class="mb-3">❓ <strong>@(index++) - @q.QuestionText</strong></h5>

                    @if (q.QuestionType == "MCQ")
                    {
                        <MudRadioGroup T="string" @bind-SelectedValue="answers[q.QuestionId]" Class="d-flex flex-column gap-2">
                            @foreach (var option in q.Answers)
                            {
                                <MudRadio T="string" Value="@option.answerText">
                                    <span>@option.answerText</span>
                                </MudRadio>
                            }
                        </MudRadioGroup>
                    }
                    else
                    {
                        <MudTextField @bind-Value="answers[q.QuestionId]" Label="✏️ اكتب إجابتك هنا" Variant="Variant.Outlined" FullWidth="true" />
                    }
                </MudPaper>
            }

            <div class="text-center mt-6">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Size="Size.Large" Class="px-6">
                    📤 ارسال الإجابات
                </MudButton>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public int TestId { get; set; }

    private List<StudentTestQuestionDto>? questions;
    private Dictionary<int, string> answers = new();
    private string? errorMessage;
    private string message = "";
    private TestDto? _test;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var test = await TestService.GetTestByIdAsync(TestId);

            if (test == null)
            {
                errorMessage = "🚫 هذا الاختبار غير موجود.";
                return;
            }

            var now = DateTime.UtcNow;
            if (now < test.StartTime || now > test.EndTime)
            {
                errorMessage = "⏱ هذا الاختبار غير متاح حالياً.";
                return;
            }

            questions = await TestService.GetValidTestQuestionsAsync(TestId);
            if (questions == null || !questions.Any())
            {
                errorMessage = "❌ لا توجد أسئلة متاحة لهذا الاختبار.";
                return;
            }

            message = "✅ هذا الاختبار متاح حالياً.";
            _test = test;
            foreach (var q in questions)
            {
                answers[q.QuestionId] = string.Empty;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "❗ حدث خطأ أثناء تحميل البيانات: " + ex.Message;
        }
    }

    private void Submit()
    {
        Console.WriteLine("📤 الإجابات:");
        foreach (var entry in answers)
        {
            Console.WriteLine($"سؤال ID: {entry.Key} => إجابة: {entry.Value}");
        }

        // بإمكانك مستقبلاً استدعاء API لحفظ الإجابات هنا
    }
}
