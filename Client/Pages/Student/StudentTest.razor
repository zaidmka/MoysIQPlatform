@page "/student-test/{TestId:int}"
@using MoysIQPlatform.Shared.Models.Questions
@using MoysIQPlatform.Shared.Models.Tests
@inject ITestService TestService
@inject NavigationManager Nav
@inject IJSRuntime JS


<div class="container py-4" dir="rtl">
    <CurrentUserState OnStateReady="HandleUserState" />

    @if (userState == null)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-2">🔐 جارٍ تحميل بيانات المستخدم...</p>
        </div>
    }
    else if (!userState.IsAuthenticated || userState.IsApproved == "false" || !userState.Role.Contains("Student"))
    {
        <div class="alert alert-warning mt-3">
            🚫 لا يمكنك الوصول إلى هذه الصفحة. يجب أن تكون طالباً مسجلاً وموافقاً عليه.
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
        <button class="btn btn-danger" @onclick="CancelError">okay</button>
    }
    else if (SubmitMessage != null)
    {
        <div class="alert alert-warning mt-3">
            <strong>⚠️ تنبيه:</strong> لا يمكنك إعادة إرسال هذا الاختبار.</div>
         <div class="alert alert-danger mt-3">@SubmitMessage</div>
        <div style="display: flex; flex-direction: column; align-items: center; justify-content: center;">
    <img src="leen500.png" height="250" class="mb-4" />
    <button class="btn btn-danger" @onclick="SubmitAction">الذهاب للصفحة الرئيسية</button>
</div>


    }

    else if (questions == null)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-2">⏳ جاري تحميل الأسئلة...</p>
        </div>
    }
    else
    {
        <div class="card shadow-sm mb-4 p-4">
            <h3 class="mb-2">📘 <strong>@_test.Title</strong></h3>
            <p class="text-muted">🕒 من <strong>@_test.StartTime.ToLocalTime():g</strong> إلى <strong>@_test.EndTime.ToLocalTime():g</strong></p>
            <div class="alert alert-success mt-3">@message</div>
        </div>
        <div id="test-timer" class="alert alert-info text-center fs-5 fw-bold">
    ⏳ --:--
</div>

<EditForm Model="answerList">
    @foreach (var answer in answerList)
    {
        var q = questionMap[answer.QuestionId];

        <div class="card mb-3 p-3 shadow-sm">
            <h5>❓ <strong>@q.QuestionText</strong></h5>

            @if (q.QuestionType == "MCQ")
            {
<InputRadioGroup @bind-Value="answer.AnswerOptionId">
    @foreach (var option in q.Answers)
    {
        var isSelected = answer.AnswerOptionId == option.answerId;

        <div class="form-check mt-2 d-flex align-items-center justify-content-between"
             style="cursor: pointer; background-color:@(isSelected ? "#e6f9ed" : "white"); border: 1px solid #ddd; border-radius: 6px; padding: 10px; transition: background-color 0.2s ease-in-out;"
            @onclick="@(() => OnOptionSelected(answer, option.answerId))"
             onmouseover="this.style.backgroundColor='#f7f7f7';"
             onmouseout="this.style.backgroundColor='@(isSelected ? "#e6f9ed" : "white")';">

            <InputRadio Value="@option.answerId"
                        AdditionalAttributes="@(new Dictionary<string, object>
                        {
                            ["name"] = $"question-{q.QuestionId}",
                            ["class"] = "form-check-input"
                        })" />

            <label class="form-check-label" style="flex: 1; font-weight: @(isSelected ? "bold" : "normal"); margin-right:30px;">
                @option.answerText
            </label>
        </div>
    }
</InputRadioGroup>


            }
            else
            {
                <textarea class="form-control mt-2"
                          @bind="answer.WrittenAnswer"
                          placeholder="✏️ اكتب إجابتك هنا..."></textarea>
            }
        </div>
    }

    <div class="text-center mt-4">
        <button class="btn btn-primary px-4 py-2" @onclick="Submit">
            📤 ارسال الإجابات
        </button>
    </div>
</EditForm>

    }
                <div class="alert alert-success mt-3">@message</div>
</div>

@code {
    [Parameter] public int TestId { get; set; }
    private string? SubmitMessage { get; set; }
    private UserAuthState? userState;
    private int studentId;
    private List<StudentTestQuestionDto>? questions;
    private Dictionary<int, StudentTestQuestionDto> questionMap = new();
    private List<StudentAnswerDto> answerList = new();
    private string? errorMessage;
    private string message = "";
    private TestDto? _test;
    private bool timerStarted = false;

    private DotNetObjectReference<StudentTest>? dotNetRef;

protected override void OnInitialized()
{
    dotNetRef = DotNetObjectReference.Create(this);
}
    private async Task HandleUserState(UserAuthState state)
    {
        userState = state;

        if (!state.IsAuthenticated || state.IsApproved == "false" || !state.Role.Contains("Student"))
            return;

        studentId = 1; // استبدله بالـ real ID لاحقاً
        await LoadTestAndQuestions();
    }

    private async Task LoadTestAndQuestions()
    {
        try
        {
            await JS.InvokeVoidAsync("startTestTimer", 1);
            await JS.InvokeVoidAsync("registerTestInstance", dotNetRef);


            var IsTestSubmitted = await TestService.IsTestSubmit(TestId);
            if (IsTestSubmitted.Data)
            {
                SubmitMessage = "❌ لقد قمت بإرسال هذا الاختبار بالفعل.";
                return;
            }

            var test = await TestService.GetTestByIdAsync(TestId);

            if (test == null)
            {
                errorMessage = "🚫 هذا الاختبار غير موجود.";
                return;
            }


            var now = DateTime.UtcNow;
            if (now < test.StartTime || now > test.EndTime)
            {
                errorMessage = "⏱ هذا الاختبار غير متاح حالياً.";
                return;
            }

            questions = await TestService.GetValidTestQuestionsAsync(TestId);
            if (questions == null || !questions.Any())
            {
                errorMessage = "❌ لا توجد أسئلة متاحة لهذا الاختبار.";
                return;
            }

            questionMap = questions.ToDictionary(q => q.QuestionId);
            _test = test;
            message = "✅ هذا الاختبار متاح حالياً.";

            foreach (var q in questions)
            {
                answerList.Add(new StudentAnswerDto
                {
                    StudentId = studentId,
                    TestId = TestId,
                    QuestionId = q.QuestionId,
                    AnsweredAt = DateTime.UtcNow
                });
            }
        }
        catch (Exception ex)
        {
            errorMessage = "❗ حدث خطأ أثناء تحميل البيانات: " + ex.Message;
        }
    }

    private async Task Submit()
    {
        if (answerList.Any(a => a.AnswerOptionId == null && string.IsNullOrWhiteSpace(a.WrittenAnswer)))
        {
            errorMessage = "⚠️ يرجى الإجابة على جميع الأسئلة قبل الإرسال.";
            return;
        }

        try
        {
            var response = await TestService.StudentAnswerSubmit(answerList);

            if (response.Success)
            {
                message = "✅ تم إرسال الإجابات بنجاح!";
                Nav.NavigateTo("/");
            }
            else
            {
                errorMessage = "❌ فشل إرسال الإجابات: " + response.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "❗ حدث خطأ أثناء إرسال الإجابات: " + ex.Message;
        }
    }
    private void CancelError()
    {
        errorMessage = null;
    }
    private void SubmitAction()
    {
        Nav.NavigateTo("/");
    }
    private async Task OnOptionSelected(StudentAnswerDto answer, int selectedId)
{
    answer.AnswerOptionId = selectedId;
    await JS.InvokeVoidAsync("playClickSound");
}
[JSInvokable("SubmitFromTimer")]
public async Task SubmitFromTimer()
{
    Console.WriteLine("⏱ Auto-submit triggered from timer.");
    Nav.NavigateTo("/");
}
}
}


}
