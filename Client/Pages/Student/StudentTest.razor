@page "/student-test/{TestId:int}"
@using MoysIQPlatform.Shared.Models.Questions
@using MoysIQPlatform.Shared.Models.Tests
@inject ITestService TestService
@inject NavigationManager Nav

<h3>📘 صفحة الاختبار</h3>

@if (errorMessage != null)
{
    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
}
else if (questions == null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    <p>جاري تحميل البيانات...</p>
}
else
{
    <EditForm Model="answers">
        @foreach (var q in questions)
        {
            <MudPaper Class="my-4 p-4">
                <h5>@q.QuestionText</h5>

                @if (q.QuestionType == "MCQ")
                {
                    <MudRadioGroup T="string" @bind-SelectedValue="answers[q.QuestionId]">
                        @foreach (var option in q.Answers)
                        {
                            <MudRadio T="string" Value="@option.answerText">@option.answerText</MudRadio>
                        }
                    </MudRadioGroup>
                }
                else
                {
                    <MudTextField @bind-Value="answers[q.QuestionId]" Label="إجابتك هنا..." />
                }
            </MudPaper>
        }

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">📤 ارسال الإجابات</MudButton>
    </EditForm>
}

@code {
    [Parameter]
    public int TestId { get; set; }

    private List<StudentTestQuestionDto>? questions;
    private Dictionary<int, string> answers = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var test = await TestService.GetTestByIdAsync(TestId);

            if (test == null)
            {
                errorMessage = "🚫 هذا الاختبار غير موجود.";
                return;
            }

            var now = DateTime.UtcNow;
            if (now < test.StartTime || now > test.EndTime)
            {
                errorMessage = "⏱ هذا الاختبار غير متاح حالياً.";
                return;
            }

            questions = await TestService.GetValidTestQuestionsAsync(TestId);
            if (questions == null || !questions.Any())
            {
                errorMessage = "❌ لا توجد أسئلة متاحة لهذا الاختبار.";
                return;
            }

            foreach (var q in questions)
            {
                answers[q.QuestionId] = string.Empty;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "حدث خطأ أثناء تحميل البيانات: " + ex.Message;
        }
    }

    private void Submit()
    {
        Console.WriteLine("📤 الإجابات:");
        foreach (var entry in answers)
        {
            Console.WriteLine($"سؤال ID: {entry.Key} => إجابة: {entry.Value}");
        }

        // بإمكانك مستقبلاً استدعاء API لحفظ الإجابات هنا
    }
}
